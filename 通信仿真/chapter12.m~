%%==================================
% pskmod系统函数的用法
%===================================
clc;
close all;
clear;

%==================================================
%  连续信号及其实现
%==================================================
t = -0.5:0.001:1;

A=3;
f=5;
fai = 1;
u = A*sin(2*pi*f*t+fai);
figure(1);
plot(t,u);
axis([-0.5 1 -3.2 3.2]);


%==================================================
%  离散信号及其实现-单位冲激序列
%==================================================

N = 50;
x= zeros(1,N);
x(1) = 1;
xn = 0:N-1;
figure(2);
stem(xn,x);
axis([-1 N+1 0 1.1]);


%==================================================
%   离散信号及其实现-任意序列
%==================================================
N=10;
x = zeros(1,N);
x(1) = 4;
x(2) = 3.6;
x(4) = 5.2;
x(5) = 2.7;
x(9) = 0.9;
xn = 0:N-1;
figure(3);
stem(xn,x);
axis([-1 N 0 6])

%==================================================
%   离散信号及其实现-单位阶跃序列
%==================================================
x = ones(1,N);
x(1:4) = 0;
xn = 0:N-1;
figure(4);
stem(xn,x);
axis([-1 N 0 1.1])

%==================================================
%   离散信号及其实现-斜坡序列
%==================================================
N = 32;
k =4;
B = 3;
t0 = 1;
x = [zeros(1,k) ones(1,N-k)];
for i = 1:N
    x(i) = B*x(i)*(i-k);
end
xn = 0:N-1;
figure(5);
stem(xn,x);
axis([-1 32 0 90])


%==================================================
%   离散信号及其实现-正弦序列
%==================================================



N=64;
A=4;
f=100;
fai=1;
xn=0:N-1;
x=A*sin(2*pi*f*(xn/N)+fai);
figure(6);
stem(xn,x)
axis([-1 N -(A+0.25) (A+0.25)])


%==================================================
%   离散信号及其实现-实指数序列
%==================================================
N = 32;
A = 5;
a = 0.6;
xn = 0:N-1;
x = A*a.^xn;
figure(7);
stem(xn,x);

%==================================================
%   离散信号及其实现-复指数序列
%==================================================
N = 32;
A = 5;
a = 0.7;
w = 314;
xn = 0:N-1;
x = A*exp((a+j*w)*xn);
figure(8);
stem(xn,x);

%==================================================
%   离散信号及其实现-随机序列
%==================================================
N=32;
x_rand = rand(1,N);
x_randn = randn(1,N);
xn = 0:N-1;
figure(9);
subplot(211);
stem(xn,x_rand);
subplot(212);
stem(xn,x_randn);


%==================================================
%  离散信号基本运算-信号延迟
%==================================================
N=32;
w=100;
k=5;
x1 = zeros(1,k);
xn = 0:N-1;
x2 = sin(100*xn);
figure(10);
subplot(211);
stem(xn,x2)
x = [x1 , x2];
axis([-1 N -1.1 1.1]);
N=N+k;
xn = 0:N-1;
subplot(212);
stem(xn,x);
axis([-1 N -1.1 1.1]);

%==================================================
%  离散信号基本运算-信号相加
%==================================================
n1 = 0:3;
x1 = [2 0.5 0.9 1];
figure(11);
subplot(311);
stem(n1,x1);
axis([-1 8 0 2.1]);
n2 = 0:7;
x2=[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7];
subplot(312);
stem(n2,x2);
axis([-1 8 0 0.8]);
n=0:7;
x1 = [x1 zeros(1,8-length(n1))];
x2 = [zeros(1,8-length(n2)), x2];
x = x1+x2;
subplot(313);
stem(n,x);
axis([-1 8 0 2.1]);


%==================================================
%  离散信号基本运算-信号相乘
%==================================================
n1 = 0:3;
x1 = [2 0.5 0.9 1];
figure(12);
subplot(311);
stem(n1,x1);
axis([-1 8 0 2.1]);
n2 = 0:7;
x2=[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7];
subplot(312);
stem(n2,x2);
axis([-1 8 0 0.8]);
n=0:7;
x1 = [x1 zeros(1,8-length(n1))];
x2 = [zeros(1,8-length(n2)),x2];
x=x1.*x2;
subplot(313);
stem(n,x);
axis([-1 8 0 0.35]);

%==================================================
%  离散信号基本运算-信号翻转
%==================================================
x1 = [2 0.5 0.9 1, 0.7 -0.6 0.1 -1.7];
x = fliplr(x1);
figure(13);
subplot(211);
stem(0:length(x1)-1,x1);
axis([-1 length(x)-1 -2 2]);
subplot(212);
stem(0:length(x)-1,x);
axis([-1 length(x) -2 2]);



%==================================================
%  离散信号基本运算-信号卷积
%==================================================

A=ones(1,3);
B=[1 7 7 5];
C=conv(A,B)

%==================================================
%  统计信号处理-自相关系数
%==================================================
%  进行10点长度的自相关计算
ww = randn(10,1);
[c_ww,lags] = xcorr(ww,10,'coeff');
figure(14);
subplot(211);
stem(ww);
subplot(212);
stem(lags,c_ww)

%==================================================
%  统计信号处理-协方差相关
%==================================================
%  进行10点长度的协方差计算
ww = randn(10,1);
[cov_ww,lags] = xcov(ww,10,'coeff');
figure(15);
subplot(211);
stem(ww);
subplot(212);
stem(lags,c_ww)


%==================================================
%  统计信号处理-频谱分析
%==================================================
%  对一个以50Hz和120Hz为主要成分的信号进行分析
Fs = 1000;             %采用频率
T=1/Fs;                %采样间隔
L = 1000;              %信号长度
t = (0:L-1)*T;         %时间向量
x  = 0.7*sin(2*pi*50*t) + sin(2*pi*120*t);
y = x+ 2*randn(size(t));
figure(16);
subplot(121);
plot(Fs*t(1:50), y(1:50));
title('原始信号');
xlabel('time(ms)');
NFFT = 2^nextpow2(L);
Y = fft(y,NFFT)/L;
f = Fs/2*linspace(0,1,NFFT/2+1);
subplot(122);
plot(f,2*abs(Y(1:NFFT/2+1)));
subplot(122);
plot(f,2*abs(Y(1:NFFT/2+1)));
title('幅度谱');
xlabel('Frequency(Hz)');
ylabel('|Y(f)|');



%==================================================
%  经典法IIR滤波器设计-巴特沃斯滤波器
%==================================================
% 实现对20Hz和200Hz单频叠加谐波信号的低通滤波，使输出仅有20H分量；
fs = 1200;    %采样频率
N = 300;
n = 0:N-1;
t = n/fs;     %时间
fL = 20;
fH = 200;
s=cos(2*pi*fL*t) + cos(2*pi*fH*t);
figure(17);
subplot(121);
plot(t,s);
title('输入信号');
xlabel('t/s');
ylabel('幅度');
sfft = fft(s);
subplot(122);
plot((1:length(sfft)/2)*fs/length(sfft), 2*abs(sfft(1:length(sfft)/2))/length(sfft));
title('信号频谱');
xlabel('频率/Hz');
ylabel('幅度');

%设计低通滤波器
Wp = 50/fs;
Ws = 100/fs;%截止频率50Hz,阻带截止频率100Hz,采样频率200Hz
[n,Wn] = buttord(Wp,Ws,1,50);   %阻带衰减大于50db,通带纹波小鱼1db
%估算得到Butterworth低通滤波器的最小阶数N和3dB的截止频谱Wn;
[a,b] = butter(n,Wn);     %设计Butterworth低通滤波器;
[h,f] = freqz(a,b,'whole',fs);     %求数字低通滤波器的频率相应；
f = (0:length(f)-1)*fs/length(f);  %进行对应的频率转换
figure(18); 
plot(f(1:length(f)/2),abs(h(1:length(f)/2)));%绘制Butterworth低通滤波器的幅频响应图
title('巴氏低通滤波器');
xlabel('频率/Hz');
ylabel('幅度');
grid;
sF = filter(a,b,s);   %叠加函数s经过低通滤波器后的新函数；
figure(25);
subplot(121);
plot(t,sF);     %绘制叠加函数S经过低通滤波后的新函数
title('输出信号');
xlabel('t/s');
ylabel('幅度');
SF = fft(sF);
subplot(122);
plot((1:length(SF)/2)*fs/length(SF), 2*abs(SF(1:length(SF)/2))/length(SF));
title('低通滤波后的频谱图');
xlabel('频率/Hz');
ylabel('幅度');




%==================================================
%  希尔伯特变换
%==================================================
t = (0:1/1023:1);
x = sin(2*pi*60*t);
y = hilbert(x);
figure(26);
plot(t(1:50),real(y(1:50))), hold on
plot(t(1:50),imag(y(1:50)),':');
axis([0 0.05 -1.1 2]);
legend('Real Part','Imaginary Part','location','northeast')



%%==================================================
%  特殊波形发生函数
%==================================================

%=========================sinc函数=========================

t = (1:10)';
randn('state',0);
x = randn(size(t));
ts = linspace(-5,15,600);
y = sinc(ts(:,ones(size(t))) - t(:,ones(size(ts)))')*x;
figure(27);
plot(t,x,'o',ts,y);

%=========================三角脉冲=========================
t = -1:0.01:1;
w=0.5;
s = 1;
y = tripuls(t);
y1 = tripuls(t,w);
y2 = tripuls(t,w,s);
figure(27);
subplot(131);
plot(t,y);

subplot(132);
plot(t,y1);

subplot(133);
plot(t,y2);
%=========================三角波=========================

t=0:0.01:60
y=sawtooth(t)
y1= sawtooth(t,0.2);
figure(28);
subplot(211)
plot(t,y);
subplot(212)
plot(t,y1);

%=========================方形脉冲=========================

t = -1:0.01:1;
w=0.5;
y = rectpuls(t);
y1 = rectpuls(t,w);
figure(29);
subplot(121);
plot(t,y);
axis([-1 1 -0.1 1.1]);
subplot(122);
plot(t,y1);
axis([-1 1 -0.1 1.1])

%=========================方波=========================
t = 0:0.01:60;
y = square(t);
y1 = square(t,10);
figure(30);
subplot(121);
plot(t,y);
axis([-0 60 -1.1 1.1]);
subplot(122);
plot(t,y1);
axis([-0 60 -1.1 1.1]);

%=========================脉冲序列=========================
t=0:1/1e3:1;
d = [0.1 0.4 0.6 0.9];
y=pulstran(t,d,'tripuls',0.1,0);
d1 = [0:1/1E1:1; 0.7.^(0:10)]';
y1=pulstran(t,d1,'gauspuls',10e3,0.5);
figure(31);
subplot(211);
plot(t,y);
axis tight;
subplot(212);
plot(t,y1);
axis tight;


%==================================================
%  
%==================================================
%==================================================
%  窗函数-矩形窗
%==================================================
n=50;
figure(17);
w = rectwin(n);
wvtool(w);

%==================================================
%  窗函数-巴特窗/三角窗
%==================================================
w1 = bartlett(7);
w2 = bartlett(8);
figure(18);
wvtool(w1);
figure(19);
wvtool(w2);


%==================================================
%  窗函数-海明窗
%==================================================
L=64;
wvtool(hamming(L));

%==================================================
%  窗函数-汉宁窗
%==================================================
L=64;

wvtool(hann(L));

%==================================================
%  窗函数-凯瑟窗
%==================================================

w = kaiser(200, 2.5);

wvtool(w);



